load("FMSReplyVO.asc");

function RemoteService(netConnection)
{
	this.host = host;
	this.gateway = gateway;
	
	this.netConnection = netConnection;
	
	this.AMFResponder = this;
	//this.AMFResponder.onResult = this.onResult;
	//this.AMFResponder.onFault = this.onFault;
	
	this.userMethodName = 'result';
	
	//error code
	this.FMSErrorCode = new Object();
	this.FMSErrorCode.none = '0';
	
	//amf service (have to be matched with client side)
	this.AMFServiceType = new Object();
	this.AMFServiceType.isLogged = 'shopper.users.User.isLogged';
	//this.AMFServiceType.logout = 'shopper.users.User.logout';
	//this.AMFServiceType.addFriend = 'shopper.users.User.addFriend';
	//this.AMFServiceType.updateLatLng = 'shopper.users.User.updateLatLng';
	
	//fms service (have to be matched with client side)
	this.FMSServiceType = new Object();
	this.FMSServiceType.walkInShop = 'shopper.fms.user.walkInShop';
	this.FMSServiceType.walkOutShop = 'shopper.fms.user.walkOutShop';
	this.FMSServiceType.sendShopChatMessage = 'shopper.fms.user.sendShopChatMessage';
	this.FMSServiceType.receiveShopChatMessage = 'shopper.fms.user.receiveShopChatMessage';
	this.FMSServiceType.shopkeeperOnline = 'shopper.fms.shop.shopkeeperOnline';
	this.FMSServiceType.shopkeeperOffline = 'shopper.fms.shop.shopkeeperOffline';
	this.FMSServiceType.shopWelcomeMessage = 'shopper.fms.shop.shopWelcomeMessage';
	//this.FMSServiceType.userInfoAll = 'shopper.fms.user.userInfoAll';
	//this.FMSServiceType.updateLatLng = 'shopper.fms.user.updateLatLng';
	//this.FMSServiceType.addFriendRequest = 'shopper.fms.user.addFriendRequest'; 
	//this.FMSServiceType.addFriendResponse = 'shopper.fms.user.addFriendResponse';
	//this.FMSServiceType.addFriendResult = 'shopper.fms.user.addFriendResult'; 
}
RemoteService.prototype.init = function()
{
	trace('RemoteService : init : connect  ' + this.host + this.gateway);
	this.netConnection.connect(this.host + this.gateway);
}

RemoteService.prototype.call = function(inAMFObj, inResponder)
{
	trace('RemoteService : call : ' + inAMFObj.service);
	
	if(inResponder == null) inResponder = this.AMFResponder;
	
	switch(inAMFObj.service)
	{
		case this.AMFServiceType.isLogged:
		/*case this.AMFServiceType.logout:
		case this.AMFServiceType.addFriend:
		case this.AMFServiceType.updateLatLng:*/
		{
			this.netConnection.call(inAMFObj.service, inResponder, inAMFObj);
			break;
		}
		default:
		{
			trace('RemoteService : call : unknow service type : ' + inAMFObj.service);
		}
	}
}

RemoteService.prototype.onResult = function(inResultObj)
{
	trace('RemoteService : onResult : ' + inResultObj.service);
	
	
	switch(String(inResultObj.service))
	{
		//case 'shopper.users.User.isLogged':
		case this.AMFServiceType.isLogged:
		{
			application.shopManager.setRemoteData(inResultObj);
			break;
		}
		/*case this.AMFServiceType.logout:
		{
			trace('application : onResult : user logged out ' + inResultObj.u_id );
			break;
		}
		case this.AMFServiceType.addFriend:
		{
			if(String(inResultObj.code) == this.FMSErrorCode.none)
			{
				var userObj1 = application.userManager.getUserObjectByUID(inResultObj.result.uid);
				var userObj2 = application.userManager.getUserObjectByUID(inResultObj.result.friendUID);
				if(userObj1 && userObj2)
				{
					var arrUserObj = new Array(userObj1, userObj2);
					for(i = 0; i<2; i++)
					{
						arrUserObj[i].call
						(
							this.userMethodName, 
							null, 
							new FMSReplyVO
							(
								this.FMSServiceType.addFriendResult, 
								this.FMSErrorCode.none, 
								true
							)
						);
					}
				}
				else
				{
					//TO DO: handle user obj not found
				}
			}
			else
			{
				//TO DO : handle add friend failed
			}
			
			break;
		}
		case this.AMFServiceType.updateLatLng:
		{
			if(String(inResultObj.code) == this.FMSErrorCode.none)
			{
				trace('RemoteService : onResult : success update latlng  ' );
			}
			else
			{
				trace('RemoteService : onResult : failed update latlng!' + inResultObj.result );
			}
			break;
		}*/
		default:
		{
			trace('RemoteService : onResult : no match service type found : ' + inResultObj.service + ", result : " + inResultObj.result);
		}
	}
}

RemoteService.prototype.onStatus = function(inResultObj) 
{
	trace('RemoteService : onFault : ' + inResultObj.service);
	return inResultObj;
}

application.registerClass("RemoteService", RemoteService);