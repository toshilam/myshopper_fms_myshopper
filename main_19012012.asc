load("FMSReplyVO.asc");
load("User.asc");
load("RemoteService.asc");
load("ShopManager.asc");
load("UserManager.asc");
load("ChatManager.asc");

application.onAppStart = function()
{
	trace('application shop : onAppStart!15');
	
	this.host = 'http://shopper.toshi.hk/'; //AMF host 
	this.gateway = 'shopperamf/gateway.php'; // amf gateway
	
	this.remoteService = new RemoteService(new NetConnection());
	this.remoteService.init();
	
	this.userManager = new UserManager();
	this.shopManager = new ShopManager();
	this.chatManager = new ChatManager();
	
	this.arrShop = new Array();
	this.arrUser = new Array();
}

application.onAppStop = function(info)
{
	trace('application shop : onAppStop!');
}

//inUserObj : FMSClient that send by FMS
//inUserData : (shop login) isShop, u_id, u_token, and service type
//inUserData : (user login 'logged / non logged') s_id (walked in shop id), u_id, u_token, and service type
application.onConnect = function(inUserObj, inUserData)
{
	trace('application : onConnect : ' + inUserObj.id + ', inUserData : ' + inUserData.u_id);
	
	var u_id = inUserData.u_id;
	
	//shop login
	if(inUserData.isShop === true)
	{
		//for the case of shop, u_id == s_id
		this.arrShop[u_id] = new User(inUserObj);
		this.arrShop[u_id].userObj.isShop = true;
		this.arrShop[u_id].init(inUserData);
		
		//for shop case, wait for response from amf
		this.remoteService.call(inUserData);
	}
	//user login (can be logged or non logged user)
	else 
	{
		if(inUserData.service == this.remoteService.FMSServiceType.walkInShop)
		{
			//s_id = shop id
			if(inUserData.s_id)
			{
				this.acceptConnection(inUserObj);
				
				trace('application : onConnectAccept : a user walk in a shop : ' + inUserData.s_id);
				
				//for user, use Client id as key (a string that uniquely identifies the client. provided by FMS)
				this.arrUser[inUserObj.id] = new User(inUserObj);
				//set basic user info
				this.arrUser[inUserObj.id].init(inUserData);
				//set walked in shop id into this user object
				this.arrUser[inUserObj.id].userObj.s_id = inUserData.s_id;
				
				if(inUserData.u_id)
				{
					//if user logged set property isLoggedUser to true
					this.arrUser[inUserObj.id].userObj.isLoggedUser = true;
				}
				
				//once a user walked in a shop, notify the related shop
				this.shopManager.walkIn(this.arrUser[inUserObj.id]);
			}
			else
			{
				trace('application : onConnect : unknown shop id : ' + inUserData.s_id);
				this.rejectConnection(inUserObj);
			}
		}
		else
		{
			trace('application : onConnect : unknown service type : ' + inUserData.service);
			this.rejectConnection(inUserObj);
		}
	}
}

/*application.onConnectAccept = function(inUserObj, inUserData)
{
	
	
}*/

application.onDisconnect = function(inUserObj)
{
	trace('application : onDisconnect : ' + inUserObj.id + ' : ' + inUserObj.u_id + ' : disconnected!');
	
	//if shop disconnected, do nothing
	if(inUserObj.isShop === true)
	{
		this.shopManager.shopkeeperOffline(inUserObj);
		
		delete this.arrShop[inUserObj.u_id];
		
	}
	else
	{
		//this.sendShopBroadcastMsg(this.getFMSReplyVO(this.remoteService.FMSServiceType.walkOutShop, inUserObj, this.remoteService.FMSErrorCode.none));
		this.shopManager.walkOut(inUserObj);
		
		delete this.arrUser[inUserObj.id];
	}
	
}

application.sendBroadcastMsg = function(inFMSReplyVO)
{
	if(inFMSReplyVO)
	{
		this.broadcastMsg(this.remoteService.userMethodName, inFMSReplyVO);
	}
	else
	{
		trace('application : sendBroadcastMsg : no data provide!');
	}
}

application.sendShopBroadcastMsg = function(inFMSReplyVO)
{
	if(inFMSReplyVO)
	{
		for(i in this.arrShop)
		{
			this.arrShop[i].userObj.call(this.remoteService.userMethodName, null, inFMSReplyVO);
			trace('application : sendShopBroadcastMsg : call : ' + this.arrShop[i].userObj.ip + ' : ' + inFMSReplyVO.service);
		}
	}
	else
	{
		trace('application : sendShopBroadcastMsg : no data provide!');
	}
}

application.sendMsg = function(inUserObj, inFMSReplyVO)
{
	if(inUserObj)
	{
		inUserObj.call(this.remoteService.userMethodName, null, inFMSReplyVO);
		trace('application : sendMsg : call : ' + inUserObj.u_id + ' : ' + inFMSReplyVO.service);
	}
	else
	{
		trace('application : sendMsg : call : unknown user object : ' + inUserObj + ' : ' + inFMSReplyVO.service);
	}
	
}

application.getFMSReplyVO = function(inService, inData, inErrorCode)
{
	return new FMSReplyVO(inService, inErrorCode, inData);
}

Client.prototype.request = function(inData)
{
	trace('Client : request : service : ' + inData.service);
	trace('Client : request : data : ' + inData.data);
	
	if(inData)
	{
		var data = inData.data;
		
		switch(String(inData.service))
		{
			case application.remoteService.FMSServiceType.sendChatMessage:
			{
				application.chatManager.sendChatMessage(this, inData);
				break;
			}
			
			default:
			{
				trace('Client : request : no matched service type found! : uid :' + this.u_id);
			}
		}
	}
	
}