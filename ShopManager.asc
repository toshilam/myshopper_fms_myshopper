function ShopManager()
{
	
}

ShopManager.prototype.init = function()
{
	
}

ShopManager.prototype.setRemoteData = function(inResultObj)
{
	var service = inResultObj.service;
	var result = inResultObj.result;
	
	trace('ShopManager : setRemoteData : service : ' + service);
	
	switch(service)
	{
		case application.remoteService.AMFServiceType.isLogged:
		{
			trace('ShopManager : setRemoteData : result.u_id : ' + result.u_id);
			
			var shopObj = application.arrShop[result.u_id];
			
			if(shopObj)
			{
				if(result.u_expired)
				{
					application.rejectConnection(shopObj.userObj);
					trace('ShopManager : setRemoteData : rejectConnection : u_expired : ' + result.u_expired );
				}
				else
				{
					application.acceptConnection(shopObj.userObj);
					trace('ShopManager : setRemoteData : shop list : ' + application.arrShop.length );
					
					this.shopkeeperOnline(shopObj.userObj);
					
				}
			}
			else
			{
				
				trace('ShopManager : setRemoteData : no matched shop found : ' + u_id);
			}
			
			
			break;
		}
	}
}

ShopManager.prototype.shopkeeperOnline = function(inShopObj)
{
	var shopObj = inShopObj;
	
	//send already walked in customer info to the logged shop
	var arrWalkedInUser = application.userManager.getUserObjByShopID(shopObj.u_id);
	var numWalkedInUser = arrWalkedInUser.length;
	
	if(numWalkedInUser)
	{
		for(i = 0; i<numWalkedInUser; i++)
		{
			this.walkIn(arrWalkedInUser[i]);
		}
	}
}

ShopManager.prototype.shopkeeperOffline = function(inShopObj)
{
	var shopObj = inShopObj;
	
	//send offline msg to all the walked in customer
	var arrWalkedInUser = application.userManager.getUserObjByShopID(shopObj.u_id);
	var numWalkedInUser = arrWalkedInUser.length;
	
	if(numWalkedInUser)
	{
		for(i = 0; i<numWalkedInUser; i++)
		{
			var userObj = arrWalkedInUser[i].userObj;
			
			application.sendMsg
			(
				userObj, 
				application.getFMSReplyVO(application.remoteService.FMSServiceType.shopkeeperOffline, null, application.remoteService.FMSErrorCode.none)
			);
		}
	}
}

ShopManager.prototype.walkIn = function(inUserObj, inData)
{
	var userObj = inUserObj
	var data = inData.data;
	
	//be sure data included walked in shop id
	if(userObj && data && data.s_id)
	{
		//set shop id to walked in user
		userObj.s_id = data.s_id;
		
		//to get the logged shop info obj / it can be null if the related shop is not logged in
		var shopObj = application.arrShop[data.s_id]; 
		
		//if shop is currently online
		if(shopObj)
		{
			//inform shop a user walked in shop
			application.sendMsg
			(
				shopObj.userObj, 
				application.getFMSReplyVO(application.remoteService.FMSServiceType.walkInShop, userObj, application.remoteService.FMSErrorCode.none)
			);
			
			//show shopkeeper icon on user side
			application.sendMsg
			(
				userObj, 
				application.getFMSReplyVO(application.remoteService.FMSServiceType.shopkeeperOnline, null, application.remoteService.FMSErrorCode.none)
			);
			
			//test code
			/*var welcomeObj = new Object();
			welcomeObj.message = 'hello test welcome message';
			application.sendMsg
			(
				userObj, 
				application.getFMSReplyVO(application.remoteService.FMSServiceType.shopWelcomeMessage, welcomeObj, application.remoteService.FMSErrorCode.none)
			);*/
			
			trace('ShopManager : walkIn : sending shop walkin msg : ' + shopObj.userObj.u_id);
		}
		else 
		{
			trace('ShopManager : walkIn : the related shop is not online! : ' + userObj.s_id);
		}
	}
	
}

ShopManager.prototype.walkOut = function(inUserObj)
{
	var userObj = inUserObj;
	
	//userObj.s_id can be null if user is not walk in any shop
	if(userObj && userObj.s_id)
	
	{
		//to get the logged shop info obj / it can be null if the related shop is not logged in
		var shopObj = application.arrShop[userObj.s_id]; 
		
		if(shopObj)
		{
			application.sendMsg
			(
				shopObj.userObj, 
				application.getFMSReplyVO(application.remoteService.FMSServiceType.walkOutShop, userObj, application.remoteService.FMSErrorCode.none)
			);
			
			//when user walked out and shopkeeper is currently online, send shopkeeperOffline msg as well
			//doesn't work, as connection was disconnected before sending this msg, client side handle itself
			/*application.sendMsg
			(
				userObj, 
				application.getFMSReplyVO(application.remoteService.FMSServiceType.shopkeeperOffline, null, application.remoteService.FMSErrorCode.none)
			);*/
			
			trace('ShopManager : walkOut : sending shop walkout msg : ' + shopObj.userObj.u_id);
		}
		else 
		{
			trace('ShopManager : walkOut : the related shop is not online! : ' + userObj.s_id);
		}
	}
	
}


application.registerClass("ShopManager", ShopManager);